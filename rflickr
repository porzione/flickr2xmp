#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'find'
require 'oj'
require 'date'
require 'dbm'
require 'erb'
require 'base64'
require 'geo/coord'
require 'active_support/core_ext/hash'
# require 'active_support/core_ext/object/blank'

require_relative 'xmp_maker'
require_relative 'xmp_rewriter'

def geo_fmt(str)
  coord = str.insert(-7, '.')
  coord.sub(/-\./, '-0.')
end

# Flickr import
class ReFlickr
  FlickrData = Struct.new(:id, :url, :views, :faves, :data, keyword_init: true)

  def initialize
    @stags = []
    @o = Struct.new(:j, :ow, :mu, :mx, :dry, :v, :vv, :vg, :vm, :wd).new
    OptionParser.new do |opts|
      opts.on('-j JSON', 'Path to JSONs') { |j| @o.j = j }
      opts.on('-o', 'Overwrite')          { @o.ow = true }
      opts.on('-m', 'Merge XMP')          { @o.mx = true }
      opts.on('--mu', 'Update')           { @o.mu = true }
      opts.on('-n', 'Dry run')            { @o.dry = true }
      opts.on('-v', 'Verbose')            { @o.v = true }
      opts.on('--vv', 'Very verbose')     { @o.vv = true }
      opts.on('--vg', 'Verbose gps')      { @o.vg = true }
      opts.on('--vm', 'Verbose merge')    { @o.vm = true }
      opts.on('--wd', 'XMP in work dir')  { @o.wd = true }
      opts.on('--st TAG', 'Skip tag')     { |t| @stags << t }
    end.parse!

    abort('provide path to jsons') unless @o.j
    abort("not a directory: #{o.j}") unless File.directory?(@o.j)

    @xmp = XmpMaker.new dry: @o.dry
    @db = DBM.open('photo', nil, DBM::READER) || abort('Problem with db')
    # TODO: @db.close
  end

  def go
    rw = XMPRewriter.new(v: @o.vm, u: @o.mu, dry: @o.dry)
    Find.find(@o.j) do |path|
      next unless path.match?(/photo_\d+.json$/)

      ih, file = process_flickr(path)
      next unless ih && file

      sidecar = "#{@o.wd ? ih[:file] : file}.xmp"
      puts "sidecar: #{sidecar}" if @o.v
      if File.exist?(sidecar)
        if @o.ow
          @xmp.write(ih, sidecar)
        elsif @o.mx
          rw.add_file(ih, sidecar)
        else
          warn "sidecar exist: #{sidecar}"
        end
      else
        @xmp.write(ih, sidecar)
      end
    end
    rw.go if @o.mx
  end

  def process_geo(geo)
    return unless geo

    g = Geo::Coord.new(geo_fmt(geo[:latitude]), geo_fmt(geo[:longitude]))
    puts "https://www.google.com/maps/place/#{g.lat},#{g.lon}" if @o.vg
    g
  end

  def process_tags(fl_tags)
    return if fl_tags.empty?

    tags = fl_tags.map { |t| t[:tag] }
    @stags.empty? ? tags : tags.reject { |t| @stags.include? t }
  end

  def process_flickr(path)
    fl = Oj.load(File.read(path), symbol_keys: true).except(:exif)
    date = DateTime.strptime(fl[:date_taken], '%Y-%m-%d %H:%M:%S')
    log = "d: #{date} t:#{date.to_time.to_i}"
    if (file = @db[date.to_time.to_i.to_s])
      puts "#{log} file:#{file}" if @o.v || @o.vv
    else
      puts log if @o.vv
      return
    end
    tags = process_tags(fl[:tags])
    puts "js: #{file} #{tags}" if @o.v
    [
      {
        file:    File.basename(file),
        title:   fl[:name],
        flickr:  flickr_data(fl),
        creator: ENV['USER'],
        tags:    tags,
        descr:   fl[:description].empty? ? nil : fl[:description],
        mdate:   DateTime.strptime(fl[:date_imported], '%Y-%m-%d %H:%M:%S'),
        cdate:   date,
        gps:     process_geo(fl[:geo])
      },
      file
    ]
  end

  # TODO: consider custom XMP namespace instead of
  # EXIF:UserComment EXIF:XPComment XMP:UserComment (now)
  def flickr_data(data)
    f = FlickrData.new(
      id:    data[:id],
      url:   data[:photopage],
      views: data[:count_views],
      faves: data[:count_faves]
    )
    d = {}
    d[:albums] = data[:albums].map { |a| a[:title] } unless data[:albums].empty?
    d[:groups] = data[:groups].map { |g| g[:name] } if data[:groups].empty?
    d[:comments] = data[:comments] unless data[:comments].empty?
    f.data = Base64.strict_encode64(Oj.dump(d)) unless d.empty?
    f
  end
end

f = ReFlickr.new
f.go
