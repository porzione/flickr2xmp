#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'chronic'
require 'yaml'
require 'active_support/core_ext/hash'
require 'flickraw'
require 'oj'

# run flickr run
class Flickr
  FlickrData = Struct.new(
    :id, :name, :description, :count_views, :count_faves,
    :date_taken, :date_imported,
    :photopage, :tags, :geo,
    keyword_init: true
  )

  def build_fd(rec)
    fl = FlickrData.new(
      id:            rec.id,
      name:          rec.title,
      description:   rec.description,
      date_taken:    rec.dates['taken'],
      date_imported: Time.at(rec.dateuploaded.to_i)
                     .strftime('%Y-%m-%d %H:%M:%S'),
      count_views:   rec.views,
      tags:          rec.tags.map { |t| { 'tag' => t['raw'] } },
      photopage:     rec.urls[0]['_content']
    )
    if rec.respond_to?(:location)
      fl.geo = rec.location.to_hash.slice('latitude', 'longitude', 'accuracy')
    end
    fl
  end

  def initialize
    optparse
    cfgload
    @per_page = 200
  end

  # TODO: flickr.photos.comments.getList

  def go
    page = 1
    loop do
      puts "page: #{page}"
      photos = read_photos(page)
      photos.each do |photo|
        rec = @flickr.photos.getInfo(photo_id: photo.id)
        fl = build_fd(rec)
        fl.count_faves = read_faves(photo.id) if @o.faves
        log(fl)
        path = File.join(@o.j || '.', "photo_#{photo.id}.json")
        File.write(path, Oj.dump(fl.to_h.compact, indent: 2, mode: :compat))
      end
      break unless photos.length == @per_page

      page += 1
    end
  end

  private

  def optparse
    @o = Struct.new(:j, :from, :to, :ud, :faves).new
    OptionParser.new do |opts|
      opts.on('-j JSON', 'Path to JSONs') { |j| @o.j = j }
      opts.on('--faves', 'Faves count')   { @o.faves = true }
      opts.on('-f date', 'Date from')     { |d| @o.from = d }
      opts.on('-t date', 'Date to')       { |d| @o.to = d }
      opts.on('--ud',    'Upload dates, default taken') { @o.ud = true }
    end.parse!
    abort "No dir '#{@o.j}'" if @o.j && !Dir.exist?(@o.j)
    if @o.from
      @o.from = Chronic.parse(@o.from, context: :past)&.to_i
      abort("bad date '#{@o.from}'") unless @o.from
    end
    if @o.to
      @o.to = Chronic.parse(@o.to)&.to_i
      abort("bad date '#{@o.to}'") unless @o.to
    end
    @o.freeze
  end

  def cfgload
    yaml = File.read("#{__dir__}/flickr.yml")
    @cfg = YAML.safe_load(yaml).deep_symbolize_keys
    @flickr = FlickRaw::Flickr.new(@cfg[:api][:key], @cfg[:api][:secret])
    return unless (access = @cfg[:api][:access])

    @flickr.access_token  = access[:token]
    @flickr.access_secret = access[:secret]
  end

  def read_photos(page)
    params = { user_id: @cfg[:user_id], page: page, per_page: @per_page }
    if @o.from
      params[@o.ud ? :min_upload_date : :min_taken_date] = @o.from
    end
    if @o.to
      params[@o.ud ? :max_upload_date : :max_taken_date] = @o.to
    end
    @flickr.people.getPhotos(params)
  end

  def read_faves(photo_id)
    @flickr.photos.getFavorites(photo_id: photo_id).total
  end

  def log(fli)
    date = @o.ud ? fli.date_taken : fli.date_imported
    stats = "v:#{fli.count_views}"
    stats = "#{stats} f:#{fli.count_faves}" if fli.count_views
    puts %(#{date} #{fli.photopage} "#{fli.name}" #{stats})
  end
end

Flickr.new.go
