#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pp'
require 'optparse'
require 'chronic'
require 'yaml'
require 'active_support/core_ext/hash'
require 'flickraw'
require 'oj'

o = Struct.new(:j, :from, :to, :ud).new
OptionParser.new do |opts|
  opts.on('-j JSON', 'Path to JSONs') { |j| o.j = j }
  opts.on('-f date', 'Date from')     { |d| o.from = d }
  opts.on('-t date', 'Date to')       { |d| o.to = d }
  opts.on('--ud',    'Upload dates, default taken') { o.ud = true }
end.parse!
abort "No dir '#{o.j}'" if o.j && !Dir.exist?(o.j)
if o.from
  o.from = Chronic.parse(o.from, context: :past)&.to_i
  abort("bad date '#{o.from}'") unless o.from
end
if o.to
  o.to = Chronic.parse(o.to)&.to_i
  abort("bad date '#{o.to}'") unless o.to
end
o.freeze

cfg = YAML.safe_load(File.read("#{__dir__}/flickr.yml")).deep_symbolize_keys
flickr = FlickRaw::Flickr.new cfg[:api][:key], cfg[:api][:secret]

if (access = cfg[:api][:access])
  flickr.access_token  = access[:token]
  flickr.access_secret = access[:secret]
end

per_page = 200
page = 1

Flickr = Struct.new(
  :id, :name, :description, :count_views,
  :date_taken, :date_imported,
  :photopage, :tags, :geo,
  keyword_init: true
)

loop do
  # puts "page: #{page}"
  # min_upload_date max_upload_date min_taken_date max_taken_date
  photos = flickr.people.getPhotos(
    user_id: cfg[:user_id], page: page, per_page: per_page
  )
  photos.each do |photo|
    r = flickr.photos.getInfo(photo_id: photo.id)
    fl = Flickr.new(
      id:            r.id,
      name:          r.title,
      description:   r.description,
      date_taken:    r.dates['taken'],
      date_imported: Time.at(r.dateuploaded.to_i).strftime('%Y-%m-%d %H:%M:%S'),
      count_views:   r.views,
      tags:          r.tags.map { |t| { 'tag' => t['raw'] } },
      photopage:     r.urls[0]['_content']
    )
    if r.respond_to?(:location)
      fl.geo = r.location.to_hash.slice('latitude', 'longitude', 'accuracy')
    end
    puts fl.photopage
    path = "photo_#{photo.id}.json"
    path = File.join(o.j, path) if o.j
    File.write(path, Oj.dump(fl.to_h, indent: 2, mode: :compat))
  end
  break unless photos.length == per_page

  page += 1
end
