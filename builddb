#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pp'
require 'optparse'
require 'ostruct'
require 'find'
require 'open3'
require 'dbm'
require 'date'
require 'oj'

excl = []
o = OpenStruct.new
OptionParser.new do |opts|
  opts.on('-i IMAGES', 'Path to images') { |i| o.i = i }
  opts.on('-e EXCLUDE', 'Exclude paths') { |e| excl << e }
  opts.on('-v', 'Verbose')               { o.v = true }
end.parse!
excl = excl.empty? ? nil : excl.join('|')

abort('provide path to images') unless o.i
abort("not a directory: #{o.i}") unless File.directory?(o.i)

def process_jfiles(files, verbose)
  db = DBM.open('photo', 0o644, DBM::WRCREAT)
  jc = 0
  files.each do |f|
    file = f['SourceFile']
    next if file.match?(/\.xmp$/i)

    d = f['CreateDate'] || next
    begin
      date = DateTime.strptime(d, '%Y:%m:%d %H:%M:%S')
    rescue ArgumentError => e
      warn "bad date format: #{path} #{d} #{e}"
      next
    end
    # TODO: array for same timestamps
    t = date.to_time.to_i.to_s
    if db.key?(file)
      puts "#{file} #{date} is dupe: #{db[t]}" if verbose
    else
      puts "#{file} #{date}" if verbose
      db[t] = file
    end
    jc += 1
  end
  puts "stored: #{jc}" if verbose
  db.close
end

Find.find(o.i) do |path|
  next unless File.directory?(path)
  next if excl && /(#{excl})/ =~ path

  puts path if o.v
  cmd = %(exiftool -j -createdate "#{path}")
  out, err, st = Open3.capture3 cmd
  unless st.success?
    warn "ERR: #{dir} #{err} #{st}"
    next
  end
  if out.empty?
    puts 'empty' if o.v
    next
  end
  begin
    jfiles = Oj.load out
  rescue Oj::ParseError => e
    warn "bad json? #{e}"
    next
  end

  process_jfiles(jfiles, o.v)
end
