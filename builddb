#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'find'
require 'open3'
require 'dbm'
require 'date'
require 'oj'

# Build db
class Builder
  def initialize
    @excl = []
    @o = Struct.new(:i, :v).new
    OptionParser.new do |opts|
      opts.on('-i IMAGES', 'Path to images') { |i| @o.i = i }
      opts.on('-e EXCLUDE', 'Exclude paths') { |e| @excl << e }
      opts.on('-v', 'Verbose')               { @o.v = true }
    end.parse!
    @excl = @excl.empty? ? nil : @excl.join('|')
    abort('provide path to images') unless @o.i
    abort("not a directory: #{@o.i}") unless File.directory?(@o.i)
  end

  def run
    @db = DBM.open('photo', 0o644, DBM::WRCREAT)
    Find.find(@o.i) do |path|
      next unless File.directory?(path)
      next if @excl && path.match?(/(#{@excl})/)

      puts path if @o.v
      cmd = %(exiftool -j -createdate "#{path}")
      out, err, st = Open3.capture3 cmd
      unless st.success?
        warn "ERR: #{dir} #{err} #{st}"
        next
      end
      if out.empty?
        puts 'empty' if @o.v
        next
      end
      parse_files_info(out)
    end
    @db.close
  end

  private

  def parse_files_info(info)
    files = Oj.load info
    process_files(files)
  rescue Oj::ParseError => e
    warn "bad json? #{e}"
  end

  def process_files(files)
    jc = 0
    files.each do |f|
      file = f['SourceFile']
      next if file.match?(/\.xmp$/i)
      next unless f['CreateDate']

      date = parse_date(f['CreateDate'], file) || next
      # TODO: array for same timestamps
      t = date.to_time.to_i.to_s
      if @db.key?(file)
        puts "#{file} #{date} is dupe: #{@db[t]}" if @o.v
      else
        puts "#{file} #{date}" if @o.v
        @db[t] = file
      end
      jc += 1
    end
    puts "stored: #{jc} total: #{@db.size}" if @o.v
  end

  def parse_date(str, path)
    DateTime.strptime(str, '%Y:%m:%d %H:%M:%S')
  rescue ArgumentError => e
    warn "bad date format: #{path} #{str} #{e}"
  end
end

b = Builder.new
b.run
